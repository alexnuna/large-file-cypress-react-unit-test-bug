{"ast":null,"code":"// @ts-check\n// helper functions that are safe to use in the browser\n// from support.js file - no file system access\n\n/**\n * remove coverage for the spec files themselves,\n * only keep \"external\" application source file coverage\n */\nvar filterSpecsFromCoverage = function filterSpecsFromCoverage(totalCoverage) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Cypress.config;\n  var integrationFolder = config('integrationFolder'); // @ts-ignore\n\n  var testFilePattern = config('testFiles'); // test files chould be:\n  //  wild card string \"**/*.*\" (default)\n  //  wild card string \"**/*spec.js\"\n  //  list of wild card strings or names [\"**/*spec.js\", \"spec-one.js\"]\n\n  var testFilePatterns = Array.isArray(testFilePattern) ? testFilePattern : [testFilePattern];\n  var isUsingDefaultTestPattern = testFilePattern === '**/*.*';\n\n  var isTestFile = function isTestFile(filename) {\n    var matchedPattern = testFilePatterns.some(function (specPattern) {\n      return Cypress.minimatch(filename, specPattern);\n    });\n    var matchedEndOfPath = testFilePatterns.some(function (specPattern) {\n      return filename.endsWith(specPattern);\n    });\n    return matchedPattern || matchedEndOfPath;\n  };\n\n  var isInIntegrationFolder = function isInIntegrationFolder(filename) {\n    return filename.startsWith(integrationFolder);\n  };\n\n  var isA = function isA(fileCoverge, filename) {\n    return isInIntegrationFolder(filename);\n  };\n\n  var isB = function isB(fileCoverge, filename) {\n    return isTestFile(filename);\n  };\n\n  var isTestFileFilter = isUsingDefaultTestPattern ? isA : isB;\n\n  var coverage = Cypress._.omitBy(totalCoverage, isTestFileFilter);\n\n  return coverage;\n};\n/**\n * Replace source-map's path by the corresponding absolute file path\n * (coverage report wouldn't work with source-map path being relative\n * or containing Webpack loaders and query parameters)\n */\n\n\nfunction fixSourcePaths(coverage) {\n  Object.values(coverage).forEach(function (file) {\n    var absolutePath = file.path,\n        inputSourceMap = file.inputSourceMap;\n    var fileName = /([^\\/\\\\]+)$/.exec(absolutePath)[1];\n    if (!inputSourceMap || !fileName) return;\n    if (inputSourceMap.sourceRoot) inputSourceMap.sourceRoot = '';\n    inputSourceMap.sources = inputSourceMap.sources.map(function (source) {\n      return source.includes(fileName) ? absolutePath : source;\n    });\n  });\n}\n\nmodule.exports = {\n  fixSourcePaths: fixSourcePaths,\n  filterSpecsFromCoverage: filterSpecsFromCoverage\n};","map":null,"metadata":{},"sourceType":"script"}