{"ast":null,"code":"\"use strict\"; /// <reference path=\"./index.d.ts\" />\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar cachedDisplayNames = new WeakMap();\n/**\n * Gets the display name of the component when possible.\n * @param type {JSX} The type object returned from creating the react element.\n * @param fallbackName {string} The alias, or fallback name to use when the name cannot be derived.\n * @link https://github.com/facebook/react-devtools/blob/master/backend/getDisplayName.js\n */\n\nfunction getDisplayName(type, fallbackName) {\n  if (fallbackName === void 0) {\n    fallbackName = 'Unknown';\n  }\n\n  var nameFromCache = cachedDisplayNames.get(type);\n\n  if (nameFromCache != null) {\n    return nameFromCache;\n  }\n\n  var displayName = null; // The displayName property is not guaranteed to be a string.\n  // It's only safe to use for our purposes if it's a string.\n  // github.com/facebook/react-devtools/issues/803\n\n  if (typeof type.displayName === 'string') {\n    displayName = type.displayName;\n  }\n\n  if (!displayName) {\n    displayName = type.name || fallbackName;\n  } // Facebook-specific hack to turn \"Image [from Image.react]\" into just \"Image\".\n  // We need displayName with module name for error reports but it clutters the DevTools.\n\n\n  var match = displayName.match(/^(.*) \\[from (.*)\\]$/);\n\n  if (match) {\n    var componentName = match[1];\n    var moduleName = match[2];\n\n    if (componentName && moduleName) {\n      if (moduleName === componentName || moduleName.startsWith(componentName + '.')) {\n        displayName = componentName;\n      }\n    }\n  }\n\n  try {\n    cachedDisplayNames.set(type, displayName);\n  } catch (e) {}\n\n  return displayName;\n}\n\nexports[\"default\"] = getDisplayName;","map":null,"metadata":{},"sourceType":"script"}