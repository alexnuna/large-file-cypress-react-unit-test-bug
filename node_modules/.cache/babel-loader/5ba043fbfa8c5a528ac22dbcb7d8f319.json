{"ast":null,"code":"// @ts-check\n// helper functions that are safe to use in the browser\n// from support.js file - no file system access\n\n/**\n * remove coverage for the spec files themselves,\n * only keep \"external\" application source file coverage\n */\nvar filterSpecsFromCoverage = function filterSpecsFromCoverage(totalCoverage) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Cypress.config;\n  var integrationFolder = config('integrationFolder'); // @ts-ignore\n\n  var testFilePattern = config('testFiles'); // test files chould be:\n  //  wild card string \"**/*.*\" (default)\n  //  wild card string \"**/*spec.js\"\n  //  list of wild card strings or names [\"**/*spec.js\", \"spec-one.js\"]\n\n  var testFilePatterns = Array.isArray(testFilePattern) ? testFilePattern : [testFilePattern];\n  var isUsingDefaultTestPattern = testFilePattern === '**/*.*';\n\n  var isTestFile = function isTestFile(filename) {\n    var matchedPattern = testFilePatterns.some(function (specPattern) {\n      return Cypress.minimatch(filename, specPattern);\n    });\n    var matchedEndOfPath = testFilePatterns.some(function (specPattern) {\n      return filename.endsWith(specPattern);\n    });\n    return matchedPattern || matchedEndOfPath;\n  };\n\n  var isInIntegrationFolder = function isInIntegrationFolder(filename) {\n    return filename.startsWith(integrationFolder);\n  };\n\n  var isA = function isA(fileCoverge, filename) {\n    return isInIntegrationFolder(filename);\n  };\n\n  var isB = function isB(fileCoverge, filename) {\n    return isTestFile(filename);\n  };\n\n  var isTestFileFilter = isUsingDefaultTestPattern ? isA : isB;\n\n  var coverage = Cypress._.omitBy(totalCoverage, isTestFileFilter);\n\n  return coverage;\n};\n/**\n * Replace source-map's path by the corresponding absolute file path\n * (coverage report wouldn't work with source-map path being relative\n * or containing Webpack loaders and query parameters)\n */\n\n\nfunction fixSourcePaths(coverage) {\n  Object.values(coverage).forEach(function (file) {\n    var absolutePath = file.path,\n        inputSourceMap = file.inputSourceMap;\n    var fileName = /([^\\/\\\\]+)$/.exec(absolutePath)[1];\n    if (!inputSourceMap || !fileName) return;\n    if (inputSourceMap.sourceRoot) inputSourceMap.sourceRoot = '';\n    inputSourceMap.sources = inputSourceMap.sources.map(function (source) {\n      return source.includes(fileName) ? absolutePath : source;\n    });\n  });\n}\n\nmodule.exports = {\n  fixSourcePaths: fixSourcePaths,\n  filterSpecsFromCoverage: filterSpecsFromCoverage\n};","map":{"version":3,"sources":["/Users/alex/Documents/code/large-file-cypress-react-unit-test-bug/node_modules/@cypress/code-coverage/support-utils.js"],"names":["filterSpecsFromCoverage","totalCoverage","config","Cypress","integrationFolder","testFilePattern","testFilePatterns","Array","isArray","isUsingDefaultTestPattern","isTestFile","filename","matchedPattern","some","specPattern","minimatch","matchedEndOfPath","endsWith","isInIntegrationFolder","startsWith","isA","fileCoverge","isB","isTestFileFilter","coverage","_","omitBy","fixSourcePaths","Object","values","forEach","file","absolutePath","path","inputSourceMap","fileName","exec","sourceRoot","sources","map","source","includes","module","exports"],"mappings":"AAAA;AACA;AACA;;AAEA;;;;AAIA,IAAMA,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,aAAD,EAA4C;AAAA,MAA5BC,MAA4B,uEAAnBC,OAAO,CAACD,MAAW;AAC1E,MAAME,iBAAiB,GAAGF,MAAM,CAAC,mBAAD,CAAhC,CAD0E,CAE1E;;AACA,MAAMG,eAAe,GAAGH,MAAM,CAAC,WAAD,CAA9B,CAH0E,CAK1E;AACA;AACA;AACA;;AACA,MAAMI,gBAAgB,GAAGC,KAAK,CAACC,OAAN,CAAcH,eAAd,IACrBA,eADqB,GAErB,CAACA,eAAD,CAFJ;AAIA,MAAMI,yBAAyB,GAAGJ,eAAe,KAAK,QAAtD;;AAEA,MAAMK,UAAU,GAAG,SAAbA,UAAa,CAAAC,QAAQ,EAAI;AAC7B,QAAMC,cAAc,GAAGN,gBAAgB,CAACO,IAAjB,CAAsB,UAAAC,WAAW;AAAA,aACtDX,OAAO,CAACY,SAAR,CAAkBJ,QAAlB,EAA4BG,WAA5B,CADsD;AAAA,KAAjC,CAAvB;AAGA,QAAME,gBAAgB,GAAGV,gBAAgB,CAACO,IAAjB,CAAsB,UAAAC,WAAW;AAAA,aACxDH,QAAQ,CAACM,QAAT,CAAkBH,WAAlB,CADwD;AAAA,KAAjC,CAAzB;AAGA,WAAOF,cAAc,IAAII,gBAAzB;AACD,GARD;;AAUA,MAAME,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAP,QAAQ;AAAA,WACpCA,QAAQ,CAACQ,UAAT,CAAoBf,iBAApB,CADoC;AAAA,GAAtC;;AAGA,MAAMgB,GAAG,GAAG,SAANA,GAAM,CAACC,WAAD,EAAcV,QAAd;AAAA,WAA2BO,qBAAqB,CAACP,QAAD,CAAhD;AAAA,GAAZ;;AACA,MAAMW,GAAG,GAAG,SAANA,GAAM,CAACD,WAAD,EAAcV,QAAd;AAAA,WAA2BD,UAAU,CAACC,QAAD,CAArC;AAAA,GAAZ;;AAEA,MAAMY,gBAAgB,GAAGd,yBAAyB,GAAGW,GAAH,GAASE,GAA3D;;AAEA,MAAME,QAAQ,GAAGrB,OAAO,CAACsB,CAAR,CAAUC,MAAV,CAAiBzB,aAAjB,EAAgCsB,gBAAhC,CAAjB;;AACA,SAAOC,QAAP;AACD,CAnCD;AAqCA;;;;;;;AAKA,SAASG,cAAT,CAAwBH,QAAxB,EAAkC;AAChCI,EAAAA,MAAM,CAACC,MAAP,CAAcL,QAAd,EAAwBM,OAAxB,CAAgC,UAAAC,IAAI,EAAI;AAAA,QACxBC,YADwB,GACSD,IADT,CAC9BE,IAD8B;AAAA,QACVC,cADU,GACSH,IADT,CACVG,cADU;AAEtC,QAAMC,QAAQ,GAAG,cAAcC,IAAd,CAAmBJ,YAAnB,EAAiC,CAAjC,CAAjB;AACA,QAAI,CAACE,cAAD,IAAmB,CAACC,QAAxB,EAAkC;AAElC,QAAID,cAAc,CAACG,UAAnB,EAA+BH,cAAc,CAACG,UAAf,GAA4B,EAA5B;AAC/BH,IAAAA,cAAc,CAACI,OAAf,GAAyBJ,cAAc,CAACI,OAAf,CAAuBC,GAAvB,CAA2B,UAAAC,MAAM;AAAA,aACxDA,MAAM,CAACC,QAAP,CAAgBN,QAAhB,IAA4BH,YAA5B,GAA2CQ,MADa;AAAA,KAAjC,CAAzB;AAGD,GATD;AAUD;;AAEDE,MAAM,CAACC,OAAP,GAAiB;AACfhB,EAAAA,cAAc,EAAdA,cADe;AAEf3B,EAAAA,uBAAuB,EAAvBA;AAFe,CAAjB","sourcesContent":["// @ts-check\n// helper functions that are safe to use in the browser\n// from support.js file - no file system access\n\n/**\n * remove coverage for the spec files themselves,\n * only keep \"external\" application source file coverage\n */\nconst filterSpecsFromCoverage = (totalCoverage, config = Cypress.config) => {\n  const integrationFolder = config('integrationFolder')\n  // @ts-ignore\n  const testFilePattern = config('testFiles')\n\n  // test files chould be:\n  //  wild card string \"**/*.*\" (default)\n  //  wild card string \"**/*spec.js\"\n  //  list of wild card strings or names [\"**/*spec.js\", \"spec-one.js\"]\n  const testFilePatterns = Array.isArray(testFilePattern)\n    ? testFilePattern\n    : [testFilePattern]\n\n  const isUsingDefaultTestPattern = testFilePattern === '**/*.*'\n\n  const isTestFile = filename => {\n    const matchedPattern = testFilePatterns.some(specPattern =>\n      Cypress.minimatch(filename, specPattern)\n    )\n    const matchedEndOfPath = testFilePatterns.some(specPattern =>\n      filename.endsWith(specPattern)\n    )\n    return matchedPattern || matchedEndOfPath\n  }\n\n  const isInIntegrationFolder = filename =>\n    filename.startsWith(integrationFolder)\n\n  const isA = (fileCoverge, filename) => isInIntegrationFolder(filename)\n  const isB = (fileCoverge, filename) => isTestFile(filename)\n\n  const isTestFileFilter = isUsingDefaultTestPattern ? isA : isB\n\n  const coverage = Cypress._.omitBy(totalCoverage, isTestFileFilter)\n  return coverage\n}\n\n/**\n * Replace source-map's path by the corresponding absolute file path\n * (coverage report wouldn't work with source-map path being relative\n * or containing Webpack loaders and query parameters)\n */\nfunction fixSourcePaths(coverage) {\n  Object.values(coverage).forEach(file => {\n    const { path: absolutePath, inputSourceMap } = file\n    const fileName = /([^\\/\\\\]+)$/.exec(absolutePath)[1]\n    if (!inputSourceMap || !fileName) return\n\n    if (inputSourceMap.sourceRoot) inputSourceMap.sourceRoot = ''\n    inputSourceMap.sources = inputSourceMap.sources.map(source =>\n      source.includes(fileName) ? absolutePath : source\n    )\n  })\n}\n\nmodule.exports = {\n  fixSourcePaths,\n  filterSpecsFromCoverage\n}\n"]},"metadata":{},"sourceType":"script"}