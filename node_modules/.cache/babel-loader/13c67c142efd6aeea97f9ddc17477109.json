{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMount = exports.unmount = exports.mount = void 0;\n\nvar React = __importStar(require(\"react\"));\n\nvar react_dom_1 = __importStar(require(\"react-dom\"));\n\nvar getDisplayName_1 = __importDefault(require(\"./getDisplayName\"));\n\nvar utils_1 = require(\"./utils\");\n\nvar rootId = 'cypress-root';\n\nvar isComponentSpec = function isComponentSpec() {\n  return Cypress.spec.specType === 'component';\n};\n\nfunction checkMountModeEnabled() {\n  if (!isComponentSpec()) {\n    throw new Error(\"In order to use mount or unmount functions please place the spec in component folder\");\n  }\n}\n/**\n * Inject custom style text or CSS file or 3rd party style resources\n */\n\n\nvar injectStyles = function injectStyles(options) {\n  return function () {\n    var document = cy.state('document');\n    var el = document.getElementById(rootId);\n    return utils_1.injectStylesBeforeElement(options, document, el);\n  };\n};\n/**\n * Mount a React component in a blank document; register it as an alias\n * To access: use an alias or original component reference\n * @function   mount\n * @param      {React.ReactElement}  jsx - component to mount\n * @param      {MountOptions}  [options] - options, like alias, styles\n * @see https://github.com/bahmutov/cypress-react-unit-test\n * @see https://glebbahmutov.com/blog/my-vision-for-component-tests/\n * @example\n ```\n  import Hello from './hello.jsx'\n  import {mount} from 'cypress-react-unit-test'\n  it('works', () => {\n    mount(<Hello onClick={cy.stub()} />)\n    // use Cypress commands\n    cy.contains('Hello').click()\n  })\n ```\n **/\n\n\nexports.mount = function (jsx, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  checkMountModeEnabled(); // Get the display name property via the component constructor\n  // @ts-ignore FIXME\n\n  var componentName = getDisplayName_1[\"default\"](jsx.type, options.alias);\n  var displayName = options.alias || componentName;\n  var message = options.alias ? \"<\" + componentName + \" ... /> as \\\"\" + options.alias + \"\\\"\" : \"<\" + componentName + \" ... />\";\n  var logInstance;\n  return cy.then(function () {\n    if (options.log !== false) {\n      logInstance = Cypress.log({\n        name: 'mount',\n        message: [message]\n      });\n    }\n  }).then(injectStyles(options)).then(function () {\n    var _a, _b, _c;\n\n    var document = cy.state('document');\n    var reactDomToUse = options.ReactDom || react_dom_1[\"default\"];\n    var el = document.getElementById(rootId);\n\n    if (!el) {\n      throw new Error(['[cypress-react-unit-test] ðŸ”¥ Hmm, cannot find root element to mount the component.', 'Did you forget to include the support file?', 'Check https://github.com/bahmutov/cypress-react-unit-test#install please'].join(' '));\n    }\n\n    var key = // @ts-ignore provide unique key to the the wrapped component to make sure we are rerendering between tests\n    (((_c = (_b = (_a = Cypress === null || Cypress === void 0 ? void 0 : Cypress.mocha) === null || _a === void 0 ? void 0 : _a.getRunner()) === null || _b === void 0 ? void 0 : _b.test) === null || _c === void 0 ? void 0 : _c.title) || '') + Math.random();\n    var props = {\n      key: key\n    };\n    var reactComponent = React.createElement(options.strict ? React.StrictMode : React.Fragment, props, jsx); // since we always surround the component with a fragment\n    // let's get back the original component\n    // @ts-ignore\n\n    var userComponent = reactComponent.props.children;\n    reactDomToUse.render(reactComponent, el);\n\n    if (logInstance) {\n      var logConsoleProps_1 = {\n        props: jsx.props,\n        description: 'Mounts React component',\n        home: 'https://github.com/bahmutov/cypress-react-unit-test'\n      };\n      var componentElement = el.children[0];\n\n      if (componentElement) {\n        // @ts-ignore\n        logConsoleProps_1.yielded = reactDomToUse.findDOMNode(componentElement);\n      }\n\n      logInstance.set('consoleProps', function () {\n        return logConsoleProps_1;\n      });\n\n      if (el.children.length) {\n        logInstance.set('$el', el.children.item(0));\n      }\n    }\n\n    return cy.wrap(userComponent, {\n      log: false\n    }).as(displayName) // by waiting, we give the component's hook a chance to run\n    // https://github.com/bahmutov/cypress-react-unit-test/issues/200\n    .wait(1, {\n      log: false\n    }).then(function () {\n      if (logInstance) {\n        logInstance.snapshot('mounted');\n        logInstance.end();\n      } // by returning undefined we keep the previous subject\n      // which is the mounted component\n\n\n      return undefined;\n    });\n  });\n};\n/**\n * Removes the mounted component. Notice this command automatically\n * queues up the `unmount` into Cypress chain, thus you don't need `.then`\n * to call it.\n * @see https://github.com/bahmutov/cypress-react-unit-test/tree/main/cypress/component/basic/unmount\n * @example\n  ```\n  import { mount, unmount } from 'cypress-react-unit-test'\n  it('works', () => {\n    mount(...)\n    // interact with the component using Cypress commands\n    // whenever you want to unmount\n    unmount()\n  })\n  ```\n */\n\n\nexports.unmount = function () {\n  checkMountModeEnabled();\n  return cy.then(function () {\n    cy.log('unmounting...');\n    var selector = '#' + rootId;\n    return cy.get(selector, {\n      log: false\n    }).then(function ($el) {\n      react_dom_1.unmountComponentAtNode($el[0]);\n    });\n  });\n};\n/**\n * Creates new instance of `mount` function with default options\n * @function   createMount\n * @param      {MountOptions}  [defaultOptions] - defaultOptions for returned `mount` function\n * @returns    new instance of `mount` with assigned options\n * @example\n * ```\n * import Hello from './hello.jsx'\n * import {Â createMount } from 'cypress-react-unit-test'\n *\n * const mount = createMount({ strict: true, cssFile: 'path/to/any/css/file.css' })\n *\n * it('works', () => {\n *   mount(<Hello />)\n *   // use Cypress commands\n *   cy.get('button').should('have.css', 'color', 'rgb(124, 12, 109)')\n * })\n ```\n **/\n\n\nexports.createMount = function (defaultOptions) {\n  return function (element, options) {\n    return exports.mount(element, __assign(__assign({}, defaultOptions), options));\n  };\n};\n/** @deprecated Should be removed in the next major version */\n\n\nexports[\"default\"] = exports.mount;","map":null,"metadata":{},"sourceType":"script"}