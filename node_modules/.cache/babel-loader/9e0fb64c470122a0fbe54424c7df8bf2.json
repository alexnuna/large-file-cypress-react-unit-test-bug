{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.injectStylesBeforeElement = void 0;\n/**\n * Insert links to external style resources.\n */\n\nfunction insertStylesheets(stylesheets, document, el) {\n  stylesheets.forEach(function (href) {\n    var link = document.createElement('link');\n    link.type = 'text/css';\n    link.rel = 'stylesheet';\n    link.href = href;\n    document.body.insertBefore(link, el);\n  });\n}\n/**\n * Inserts a single stylesheet element\n */\n\n\nfunction insertStyles(styles, document, el) {\n  styles.forEach(function (style) {\n    var styleElement = document.createElement('style');\n    styleElement.appendChild(document.createTextNode(style));\n    document.body.insertBefore(styleElement, el);\n  });\n}\n\nfunction insertSingleCssFile(cssFilename, document, el, log) {\n  return cy.readFile(cssFilename, {\n    log: log\n  }).then(function (css) {\n    var style = document.createElement('style');\n    style.appendChild(document.createTextNode(css));\n    document.body.insertBefore(style, el);\n  });\n}\n/**\n * Reads the given CSS file from local file system\n * and adds the loaded style text as an element.\n */\n\n\nfunction insertLocalCssFiles(cssFilenames, document, el, log) {\n  return Cypress.Promise.mapSeries(cssFilenames, function (cssFilename) {\n    return insertSingleCssFile(cssFilename, document, el, log);\n  });\n}\n/**\n * Injects custom style text or CSS file or 3rd party style resources\n * into the given document.\n */\n\n\nexports.injectStylesBeforeElement = function (options, document, el) {\n  // first insert all stylesheets as Link elements\n  var stylesheets = [];\n\n  if (typeof options.stylesheet === 'string') {\n    stylesheets.push(options.stylesheet);\n  } else if (Array.isArray(options.stylesheet)) {\n    stylesheets = stylesheets.concat(options.stylesheet);\n  }\n\n  if (typeof options.stylesheets === 'string') {\n    options.stylesheets = [options.stylesheets];\n  }\n\n  if (options.stylesheets) {\n    stylesheets = stylesheets.concat(options.stylesheets);\n  }\n\n  insertStylesheets(stylesheets, document, el); // insert any styles as <style>...</style> elements\n\n  var styles = [];\n\n  if (typeof options.style === 'string') {\n    styles.push(options.style);\n  } else if (Array.isArray(options.style)) {\n    styles = styles.concat(options.style);\n  }\n\n  if (typeof options.styles === 'string') {\n    styles.push(options.styles);\n  } else if (Array.isArray(options.styles)) {\n    styles = styles.concat(options.styles);\n  }\n\n  insertStyles(styles, document, el); // now load any css files by path and add their content\n  // as <style>...</style> elements\n\n  var cssFiles = [];\n\n  if (typeof options.cssFile === 'string') {\n    cssFiles.push(options.cssFile);\n  } else if (Array.isArray(options.cssFile)) {\n    cssFiles = cssFiles.concat(options.cssFile);\n  }\n\n  if (typeof options.cssFiles === 'string') {\n    cssFiles.push(options.cssFiles);\n  } else if (Array.isArray(options.cssFiles)) {\n    cssFiles = cssFiles.concat(options.cssFiles);\n  }\n\n  return insertLocalCssFiles(cssFiles, document, el, options.log);\n};","map":null,"metadata":{},"sourceType":"script"}