{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mountHook = void 0;\n\nvar React = __importStar(require(\"react\"));\n\nvar mount_1 = require(\"./mount\"); // mounting hooks inside a test component mostly copied from\n// https://github.com/testing-library/react-hooks-testing-library/blob/master/src/pure.js\n\n\nfunction resultContainer() {\n  var value = null;\n  var error = null;\n  var resolvers = [];\n  var result = {\n    get current() {\n      if (error) {\n        throw error;\n      }\n\n      return value;\n    },\n\n    get error() {\n      return error;\n    }\n\n  };\n\n  var updateResult = function updateResult(val, err) {\n    if (err === void 0) {\n      err = null;\n    }\n\n    value = val;\n    error = err;\n    resolvers.splice(0, resolvers.length).forEach(function (resolve) {\n      return resolve();\n    });\n  };\n\n  return {\n    result: result,\n    addResolver: function addResolver(resolver) {\n      resolvers.push(resolver);\n    },\n    setValue: function setValue(val) {\n      return updateResult(val);\n    },\n    setError: function setError(err) {\n      return updateResult(undefined, err);\n    }\n  };\n}\n\nfunction TestHook(_a) {\n  var callback = _a.callback,\n      onError = _a.onError,\n      children = _a.children;\n\n  try {\n    children(callback());\n  } catch (err) {\n    if (err.then) {\n      throw err;\n    } else {\n      onError(err);\n    }\n  } // TODO decide what the test hook component should show\n  // maybe nothing, or maybe useful information about the hook?\n  // maybe its current properties?\n  // return <div>TestHook</div>\n\n\n  return null;\n}\n/**\n * Mounts a React hook function in a test component for testing.\n *\n * @see https://github.com/bahmutov/cypress-react-unit-test#advanced-examples\n */\n\n\nexports.mountHook = function (hookFn) {\n  var _a = resultContainer(),\n      result = _a.result,\n      setValue = _a.setValue,\n      setError = _a.setError;\n\n  return mount_1.mount(React.createElement(TestHook, {\n    callback: hookFn,\n    onError: setError,\n    children: setValue\n  })).then(function () {\n    cy.wrap(result);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}